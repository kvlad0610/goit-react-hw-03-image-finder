{"version":3,"sources":["Services/Services.js","Components/Searchbar/Searchbar.jsx","Components/ImageGalleryItem/ImageGalleryItem.jsx","Components/ImageGallery/ImageGallery.jsx","Components/Button/Button.jsx","Components/Modal/Modal.jsx","Components/Loader/Loader.jsx","App.js","index.js"],"names":["getApp","search","page","axios","get","then","data","Searchbar","onSubmit","onPage","useState","name","setName","className","e","preventDefault","trim","toast","error","type","placeholder","value","onChange","target","toLowerCase","ImageGalleryItem","webformatURL","largeImageURL","onClickImg","src","data-url","alt","onClick","console","log","currentTarget","dataset","url","ImageGallery","gallery","imgModal","map","id","Button","onChangePage","Modal","onUrl","onCloseModal","handleEscape","code","useEffect","window","addEventListener","removeEventListener","Spinner","color","height","width","App","setSearch","setPage","setGallery","isLoading","setIsLoading","imgForModal","setImgForModal","hits","catch","finally","prevState","scrollTo","top","document","documentElement","scrollHeight","behavior","autoClose","length","ReactDOM","render","StrictMode","getElementById"],"mappings":"yRAGe,SAASA,EAAOC,EAAQC,GACrC,OAAOC,IACJC,IADI,qCAE2BH,EAF3B,iBAE0CC,EAF1C,gBAFG,qCAEH,yDAIJG,MAAK,qBAAGC,Q,WCLE,SAASC,EAAT,GAA0C,IAArBC,EAAoB,EAApBA,SAAUC,EAAU,EAAVA,OAAU,EAC9BC,mBAAS,IADqB,mBAC/CC,EAD+C,KACzCC,EADyC,KAkBtD,OACE,wBAAQC,UAAU,YAAlB,SACE,uBAAMA,UAAU,aAAaL,SAbjC,SAAsBM,GACpBA,EAAEC,iBACkB,KAAhBJ,EAAKK,QAITP,IACAD,EAASG,GACTC,EAAQ,KALNK,IAAMC,MAAM,kEAUZ,UACE,wBAAQC,KAAK,SAASN,UAAU,oBAAhC,SACE,sBAAMA,UAAU,0BAAhB,sBAGF,uBACEA,UAAU,mBACVM,KAAK,OAGLC,YAAY,2BACZC,MAAOV,EACPW,SA7BR,SAAsBR,GACpBF,EAAQE,EAAES,OAAOF,MAAMG,uBCLZ,SAASC,EAAT,GAIX,IAHFC,EAGC,EAHDA,aACAC,EAEC,EAFDA,cACAC,EACC,EADDA,WAYA,OACE,oBAAIf,UAAU,mBAAd,SACE,qBACEgB,IAAKH,EACLI,WAAUH,EACVI,IAAI,GACJlB,UAAU,yBACVmB,QAXN,SAAkBlB,GAChBmB,QAAQC,IAAIpB,EAAEqB,cAAcC,QAAQC,KACpCT,EAAWd,EAAEqB,cAAcC,QAAQC,UCZxB,SAASC,EAAT,GAA8C,IAAtBC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,SAM9C,OACE,oBAAI3B,UAAU,eAAd,SACG0B,GACCA,EAAQE,KAAI,gBAAGC,EAAH,EAAGA,GAAIhB,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,cAArB,OACV,cAACF,EAAD,CAEEC,aAAcA,EACdC,cAAeA,EACfC,WAAYY,GAHPE,QCdF,SAASC,EAAT,GAAmC,IAAjBC,EAAgB,EAAhBA,aAC/B,OACE,qBAAK/B,UAAU,kBAAf,SACE,wBAAQA,UAAU,SAASM,KAAK,SAASa,QAASY,EAAlD,yBCDS,SAASC,EAAT,GAAyC,IAAxBC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,aAC/BC,EAAe,SAAAlC,GACJ,WAAXA,EAAEmC,MACJF,KAgBJ,OAPAG,qBAAU,WAER,OADAC,OAAOC,iBAAiB,UAAWJ,GAC5B,WACLG,OAAOE,oBAAoB,UAAWL,OAKxC,qBAAKnC,UAAU,UAAUmB,QAdJ,SAAAlB,GACjBA,EAAEqB,gBAAkBrB,EAAES,QACxBwB,KAYF,SACE,qBAAKlC,UAAU,QAAf,SACE,qBAAKgB,IAAKiB,EAAOf,IAAI,S,2BCrBd,SAASuB,IACtB,OACE,qBAAKzC,UAAU,mBAAf,SACE,cAAC,IAAD,CACEM,KAAK,OACLoC,MAAM,UACNC,OAAQ,IACRC,MAAO,Q,YCMA,SAASC,IAAO,IAAD,EACAhD,mBAAS,IADT,mBACrBT,EADqB,KACb0D,EADa,OAEJjD,mBAAS,GAFL,mBAErBR,EAFqB,KAEf0D,EAFe,OAGElD,mBAAS,IAHX,mBAGrB6B,EAHqB,KAGZsB,EAHY,OAIMnD,oBAAS,GAJf,mBAIrBoD,EAJqB,KAIVC,EAJU,OAKUrD,mBAAS,MALnB,mBAKrBsD,EALqB,KAKRC,EALQ,KAwD5B,OAjDAhC,QAAQC,IAAIK,GACZN,QAAQC,IAAIjC,GACZgC,QAAQC,IAAI8B,GA6BZd,qBAAU,WACO,KAAXjD,GAA0B,IAATC,IACnB6D,GAAa,GACb/D,EAAOC,EAAQC,GACZG,MAAK,gBAAG6D,EAAH,EAAGA,KAAH,OAAcL,EAAWK,MAC9BC,OAAM,SAAAjD,GAAK,OAAID,IAAMC,MAAM,YAC3BkD,SAAQ,kBAAML,GAAa,OAEjB,KAAX9D,GAAiBC,EAAO,IAC1B6D,GAAa,GACb/D,EAAOC,EAAQC,GACZG,MAAK,gBAAG6D,EAAH,EAAGA,KAAH,OAAcL,GAAW,SAAAQ,GAAS,4BAAQA,GAAR,YAAsBH,UAC7D7D,MAAK,WAlBV8C,OAAOmB,SAAS,CACdC,IAAKC,SAASC,gBAAgBC,aAC9BC,SAAU,cAiBPR,OAAM,SAAAjD,GAAK,OAAID,IAAMC,MAAM,YAC3BkD,SAAQ,kBAAML,GAAa,SAE/B,CAAC9D,EAAQC,IAGV,gCACE,cAAC,IAAD,CAAgB0E,UAAW,MAC3B,cAACrE,EAAD,CAAWC,SAhDf,SAAmBG,GACjBgD,EAAUhD,IA+CwBF,OAxCpC,WACEmD,EAAQ,MAwCN,cAACtB,EAAD,CAAcC,QAASA,EAASC,SArCpC,SAAmBH,GACjB4B,EAAe5B,MAqCZyB,EACC,cAACR,EAAD,IAEmB,IAAnBf,EAAQsC,QAAgB,cAAClC,EAAD,CAAQC,aAjDtC,WACEgB,GAAQ,SAAAS,GAAS,OAAIA,EAAY,QAmD9BL,GAAe,cAACnB,EAAD,CAAOC,MAAOkB,EAAajB,aAxC/C,WACEkB,EAAe,YCvCnBa,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFR,SAASS,eAAe,W","file":"static/js/main.857c06d4.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst key = '19732085-0a6dcdc0e90ef399881a67a68';\r\nexport default function getApp(search, page) {\r\n  return axios\r\n    .get(\r\n      `https://pixabay.com/api/?q=${search}&page=${page}&key=${key}&image_type=photo&orientation=horizontal&per_page=12`,\r\n    )\r\n    .then(({ data }) => data);\r\n}\r\n","import { useState } from 'react';\r\nimport { toast } from 'react-toastify';\r\n\r\nexport default function Searchbar({ onSubmit, onPage }) {\r\n  const [name, setName] = useState('');\r\n\r\n  function handleChange(e) {\r\n    setName(e.target.value.toLowerCase());\r\n  }\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    if (name.trim() === '') {\r\n      toast.error('Пустое поле');\r\n      return;\r\n    }\r\n    onPage();\r\n    onSubmit(name);\r\n    setName('');\r\n  }\r\n\r\n  return (\r\n    <header className=\"Searchbar\">\r\n      <form className=\"SearchForm\" onSubmit={handleSubmit}>\r\n        <button type=\"submit\" className=\"SearchForm-button\">\r\n          <span className=\"SearchForm-button-label\">Search</span>\r\n        </button>\r\n\r\n        <input\r\n          className=\"SearchForm-input\"\r\n          type=\"text\"\r\n          // autocomplete=\"off\"\r\n          // autofocus\r\n          placeholder=\"Search images and photos\"\r\n          value={name}\r\n          onChange={handleChange}\r\n        />\r\n      </form>\r\n    </header>\r\n  );\r\n}\r\n","import propTypes from 'prop-types';\r\n\r\nexport default function ImageGalleryItem({\r\n  webformatURL,\r\n  largeImageURL,\r\n  onClickImg,\r\n}) {\r\n  ImageGalleryItem.propTypes = {\r\n    webformatURL: propTypes.string,\r\n    largeImageURL: propTypes.string,\r\n    onClickImg: propTypes.func.isRequired,\r\n  };\r\n\r\n  function clickImg(e) {\r\n    console.log(e.currentTarget.dataset.url);\r\n    onClickImg(e.currentTarget.dataset.url);\r\n  }\r\n  return (\r\n    <li className=\"ImageGalleryItem\">\r\n      <img\r\n        src={webformatURL}\r\n        data-url={largeImageURL}\r\n        alt=\"\"\r\n        className=\"ImageGalleryItem-image\"\r\n        onClick={clickImg}\r\n      />\r\n    </li>\r\n  );\r\n}\r\n","import ImageGalleryItem from '../ImageGalleryItem/ImageGalleryItem';\r\nimport propTypes from 'prop-types';\r\n\r\nexport default function ImageGallery({ gallery, imgModal }) {\r\n  ImageGallery.propTypes = {\r\n    gallery: propTypes.array,\r\n    imgModal: propTypes.func.isRequired,\r\n  };\r\n\r\n  return (\r\n    <ul className=\"ImageGallery\">\r\n      {gallery &&\r\n        gallery.map(({ id, webformatURL, largeImageURL }) => (\r\n          <ImageGalleryItem\r\n            key={id}\r\n            webformatURL={webformatURL}\r\n            largeImageURL={largeImageURL}\r\n            onClickImg={imgModal}\r\n          />\r\n        ))}\r\n    </ul>\r\n  );\r\n}\r\n","export default function Button({ onChangePage }) {\r\n  return (\r\n    <div className=\"ContainerButton\">\r\n      <button className=\"Button\" type=\"button\" onClick={onChangePage}>\r\n        Load more\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import { useEffect } from 'react';\r\n\r\nexport default function Modal({ onUrl, onCloseModal }) {\r\n  const handleEscape = e => {\r\n    if (e.code === 'Escape') {\r\n      onCloseModal();\r\n    }\r\n  };\r\n  const handleBackdrop = e => {\r\n    if (e.currentTarget === e.target) {\r\n      onCloseModal();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('keydown', handleEscape);\r\n    return () => {\r\n      window.removeEventListener('keydown', handleEscape);\r\n    };\r\n  });\r\n\r\n  return (\r\n    <div className=\"Overlay\" onClick={handleBackdrop}>\r\n      <div className=\"Modal\">\r\n        <img src={onUrl} alt=\"\" />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import Loader from 'react-loader-spinner';\r\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\r\n\r\nexport default function Spinner() {\r\n  return (\r\n    <div className=\"spinnerContainer\">\r\n      <Loader\r\n        type=\"Puff\"\r\n        color=\"#00BFFF\"\r\n        height={100}\r\n        width={100}\r\n\r\n        // timeout={3000} //3 secs\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import { ToastContainer } from 'react-toastify';\nimport { toast } from 'react-toastify';\n// import Loader from 'react-loader-spinner';\nimport { useEffect, useState } from 'react';\nimport getApp from './Services/Services';\n\nimport Searchbar from './Components/Searchbar/Searchbar';\nimport ImageGallery from './Components/ImageGallery/ImageGallery';\nimport Button from './Components/Button/Button';\nimport Modal from './Components/Modal/Modal';\nimport Spinner from './Components/Loader/Loader';\n\nimport 'react-toastify/dist/ReactToastify.css';\n// import 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\nimport './App.css';\n\nexport default function App() {\n  const [search, setSearch] = useState('');\n  const [page, setPage] = useState(1);\n  const [gallery, setGallery] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [imgForModal, setImgForModal] = useState(null);\n\n  console.log(gallery);\n  console.log(search);\n  console.log(imgForModal);\n\n  function searchApp(name) {\n    setSearch(name);\n  }\n\n  function changePage() {\n    setPage(prevState => prevState + 1);\n  }\n\n  function startPage() {\n    setPage(1);\n  }\n\n  function openModal(url) {\n    setImgForModal(url);\n  }\n\n  function closeModal() {\n    setImgForModal(null);\n  }\n\n  function scroll() {\n    window.scrollTo({\n      top: document.documentElement.scrollHeight,\n      behavior: 'smooth',\n    });\n  }\n\n  useEffect(() => {\n    if (search !== '' && page === 1) {\n      setIsLoading(true);\n      getApp(search, page)\n        .then(({ hits }) => setGallery(hits))\n        .catch(error => toast.error('Error'))\n        .finally(() => setIsLoading(false));\n    }\n    if (search !== '' && page > 1) {\n      setIsLoading(true);\n      getApp(search, page)\n        .then(({ hits }) => setGallery(prevState => [...prevState, ...hits]))\n        .then(() => scroll())\n        .catch(error => toast.error('Error'))\n        .finally(() => setIsLoading(false));\n    }\n  }, [search, page]);\n\n  return (\n    <div>\n      <ToastContainer autoClose={3000} />\n      <Searchbar onSubmit={searchApp} onPage={startPage} />\n      <ImageGallery gallery={gallery} imgModal={openModal} />\n      {isLoading ? (\n        <Spinner />\n      ) : (\n        gallery.length !== 0 && <Button onChangePage={changePage} />\n      )}\n\n      {imgForModal && <Modal onUrl={imgForModal} onCloseModal={closeModal} />}\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}